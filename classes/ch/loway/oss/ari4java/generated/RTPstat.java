package ch.loway.oss.ari4java.generated;

// ----------------------------------------------------
//      THIS CLASS WAS GENERATED AUTOMATICALLY         
//               PLEASE DO NOT EDIT                    
//    Generated on: Wed Oct 02 15:49:49 SAST 2019
// ----------------------------------------------------

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import ch.loway.oss.ari4java.tools.RestException;
import ch.loway.oss.ari4java.tools.AriCallback;
import ch.loway.oss.ari4java.tools.tags.*;

/**********************************************************
 * 
 * Generated by: JavaInterface
 *********************************************************/


public interface RTPstat {

// void setLocal_maxrxploss double
/**********************************************************
 * Maximum number of packets lost on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setLocal_maxrxploss(double val );



// void setLocal_normdevrxploss double
/**********************************************************
 * Average number of packets lost on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setLocal_normdevrxploss(double val );



// double getStdevrtt
/**********************************************************
 * Standard deviation round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getStdevrtt();



// void setTxcount int
/**********************************************************
 * Number of packets transmitted.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setTxcount(int val );



// double getRemote_normdevrxploss
/**********************************************************
 * Average number of packets lost on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRemote_normdevrxploss();



// double getLocal_normdevrxploss
/**********************************************************
 * Average number of packets lost on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getLocal_normdevrxploss();



// void setRemote_normdevjitter double
/**********************************************************
 * Average jitter on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRemote_normdevjitter(double val );



// void setChannel_uniqueid String
/**********************************************************
 * The Asterisk channel's unique ID that owns this instance.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setChannel_uniqueid(String val );



// void setLocal_minrxploss double
/**********************************************************
 * Minimum number of packets lost on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setLocal_minrxploss(double val );



// void setStdevrtt double
/**********************************************************
 * Standard deviation round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setStdevrtt(double val );



// double getLocal_maxrxploss
/**********************************************************
 * Maximum number of packets lost on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getLocal_maxrxploss();



// double getRemote_normdevjitter
/**********************************************************
 * Average jitter on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRemote_normdevjitter();



// int getLocal_ssrc
/**********************************************************
 * Our SSRC.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public int getLocal_ssrc();



// void setRemote_stdevrxploss double
/**********************************************************
 * Standard deviation packets lost on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRemote_stdevrxploss(double val );



// void setTxploss int
/**********************************************************
 * Number of transmitted packets lost.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setTxploss(int val );



// void setMaxrtt double
/**********************************************************
 * Maximum round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setMaxrtt(double val );



// void setRxoctetcount int
/**********************************************************
 * Number of octets received.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRxoctetcount(int val );



// double getNormdevrtt
/**********************************************************
 * Average round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getNormdevrtt();



// void setLocal_normdevjitter double
/**********************************************************
 * Average jitter on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setLocal_normdevjitter(double val );



// int getTxploss
/**********************************************************
 * Number of transmitted packets lost.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public int getTxploss();



// double getRtt
/**********************************************************
 * Total round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRtt();



// double getRemote_stdevjitter
/**********************************************************
 * Standard deviation jitter on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRemote_stdevjitter();



// double getRemote_minrxploss
/**********************************************************
 * Minimum number of packets lost on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRemote_minrxploss();



// void setMinrtt double
/**********************************************************
 * Minimum round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setMinrtt(double val );



// int getRxcount
/**********************************************************
 * Number of packets received.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public int getRxcount();



// void setRtt double
/**********************************************************
 * Total round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRtt(double val );



// int getTxcount
/**********************************************************
 * Number of packets transmitted.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public int getTxcount();



// void setLocal_ssrc int
/**********************************************************
 * Our SSRC.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setLocal_ssrc(int val );



// double getLocal_normdevjitter
/**********************************************************
 * Average jitter on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getLocal_normdevjitter();



// double getRemote_minjitter
/**********************************************************
 * Minimum jitter on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRemote_minjitter();



// void setTxoctetcount int
/**********************************************************
 * Number of octets transmitted.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setTxoctetcount(int val );



// double getLocal_stdevjitter
/**********************************************************
 * Standard deviation jitter on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getLocal_stdevjitter();



// void setRxjitter double
/**********************************************************
 * Jitter on received packets.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRxjitter(double val );



// void setRemote_maxrxploss double
/**********************************************************
 * Maximum number of packets lost on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRemote_maxrxploss(double val );



// double getMaxrtt
/**********************************************************
 * Maximum round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getMaxrtt();



// String getChannel_uniqueid
/**********************************************************
 * The Asterisk channel's unique ID that owns this instance.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public String getChannel_uniqueid();



// void setRemote_stdevjitter double
/**********************************************************
 * Standard deviation jitter on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRemote_stdevjitter(double val );



// double getLocal_minjitter
/**********************************************************
 * Minimum jitter on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getLocal_minjitter();



// double getMinrtt
/**********************************************************
 * Minimum round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getMinrtt();



// double getLocal_stdevrxploss
/**********************************************************
 * Standard deviation packets lost on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getLocal_stdevrxploss();



// int getTxoctetcount
/**********************************************************
 * Number of octets transmitted.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public int getTxoctetcount();



// void setRemote_maxjitter double
/**********************************************************
 * Maximum jitter on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRemote_maxjitter(double val );



// void setRemote_minjitter double
/**********************************************************
 * Minimum jitter on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRemote_minjitter(double val );



// double getRemote_stdevrxploss
/**********************************************************
 * Standard deviation packets lost on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRemote_stdevrxploss();



// void setNormdevrtt double
/**********************************************************
 * Average round trip time.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setNormdevrtt(double val );



// double getLocal_maxjitter
/**********************************************************
 * Maximum jitter on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getLocal_maxjitter();



// double getRemote_maxjitter
/**********************************************************
 * Maximum jitter on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRemote_maxjitter();



// void setRemote_minrxploss double
/**********************************************************
 * Minimum number of packets lost on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRemote_minrxploss(double val );



// double getRemote_maxrxploss
/**********************************************************
 * Maximum number of packets lost on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRemote_maxrxploss();



// double getTxjitter
/**********************************************************
 * Jitter on transmitted packets.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getTxjitter();



// void setRxploss int
/**********************************************************
 * Number of received packets lost.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRxploss(int val );



// int getRemote_ssrc
/**********************************************************
 * Their SSRC.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public int getRemote_ssrc();



// int getRxoctetcount
/**********************************************************
 * Number of octets received.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public int getRxoctetcount();



// int getRxploss
/**********************************************************
 * Number of received packets lost.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public int getRxploss();



// void setLocal_stdevrxploss double
/**********************************************************
 * Standard deviation packets lost on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setLocal_stdevrxploss(double val );



// void setLocal_stdevjitter double
/**********************************************************
 * Standard deviation jitter on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setLocal_stdevjitter(double val );



// void setRemote_normdevrxploss double
/**********************************************************
 * Average number of packets lost on remote side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRemote_normdevrxploss(double val );



// double getLocal_minrxploss
/**********************************************************
 * Minimum number of packets lost on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getLocal_minrxploss();



// void setRemote_ssrc int
/**********************************************************
 * Their SSRC.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRemote_ssrc(int val );



// void setTxjitter double
/**********************************************************
 * Jitter on transmitted packets.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setTxjitter(double val );



// double getRxjitter
/**********************************************************
 * Jitter on received packets.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public double getRxjitter();



// void setRxcount int
/**********************************************************
 * Number of packets received.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setRxcount(int val );



// void setLocal_minjitter double
/**********************************************************
 * Minimum jitter on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setLocal_minjitter(double val );



// void setLocal_maxjitter double
/**********************************************************
 * Maximum jitter on local side.
 * 
 * @since ari_4_0_2
 *********************************************************/
 public void setLocal_maxjitter(double val );


}
;
